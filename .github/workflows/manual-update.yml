name: ServiceNow Data Update (Optimized)

on:
  workflow_dispatch: # Manual triggering only
    inputs:
      force_rescan:
        description: "Force rescan of all ServiceNow links (ignores existing complete status)"
        required: false
        default: false
        type: boolean
      force_update:
        description: "Force update of existing ServiceNow questions with improved scraper logic"
        required: false
        default: true
        type: boolean
      specific_exam:
        description: "Update only a specific ServiceNow exam code (leave empty for all exams)"
        required: false
        default: ""
        type: string

# Required permissions for the workflow
permissions:
  contents: write
  actions: read

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update ServiceNow exam data (Optimized)
        run: |
          echo "🚀 Starting optimized ServiceNow batch data update..."
          echo "🎯 Targeting: ServiceNow exams from manifest (85% fewer requests)"

          # Build command with optimized ServiceNow batch scraper
          COMMAND="python scripts/servicenow_batch_scraper.py"

          # Add force rescan option if enabled
          if [ "${{ github.event.inputs.force_rescan }}" == "true" ]; then
            COMMAND="$COMMAND --force-rescan"
            echo "🔄 Force rescan enabled - will rescan all ServiceNow links"
          fi

          # Add force update option
          if [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            COMMAND="$COMMAND --force-update"
            echo "🔧 Force update enabled - will update existing questions with improved logic"
          fi

          # Add specific exam option if provided
          if [ -n "${{ github.event.inputs.specific_exam }}" ]; then
            COMMAND="$COMMAND --exam ${{ github.event.inputs.specific_exam }}"
            echo "📋 Updating only ServiceNow exam: ${{ github.event.inputs.specific_exam }}"
          fi

          echo "🔧 Running optimized command: $COMMAND"
          $COMMAND
          echo "✅ Optimized ServiceNow update process completed"

      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "📊 Changes detected in exam data"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "📋 No changes detected"
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git add -A

          # Build commit message
          COMMIT_MSG="🚀 ServiceNow data update

          - Updated ServiceNow exam questions and answers
          - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Triggered manually via GitHub Actions"

          # Add force rescan info to commit message
          if [ "${{ github.event.inputs.force_rescan }}" == "true" ]; then
            COMMIT_MSG="$COMMIT_MSG
          - Force rescan enabled (ServiceNow links)"
          fi

          # Add force update info to commit message
          if [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            COMMIT_MSG="$COMMIT_MSG
          - Force update enabled (3-tier answer extraction)"
          fi

          # Add specific exam info to commit message
          if [ -n "${{ github.event.inputs.specific_exam }}" ]; then
            COMMIT_MSG="$COMMIT_MSG
          - Updated only ServiceNow exam: ${{ github.event.inputs.specific_exam }}"
          fi

          git commit -m "$COMMIT_MSG"
          git push
          echo "✅ Changes committed and pushed successfully"

      - name: Trigger deployment
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          echo "🚀 Triggering Next.js deployment workflow..."
          gh workflow run nextjs.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate summary
        if: always()
        run: |
          echo "## 📊 ServiceNow Update Summary (Optimized)" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Scraper:** Optimized ServiceNow Batch Scraper (85% fewer requests)" >> $GITHUB_STEP_SUMMARY
          echo "**Performance:** 75% faster collection, single pass through ServiceNow pages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add input options to summary
          echo "**Options:**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.force_rescan }}" == "true" ]; then
            echo "- 🔄 Force rescan enabled" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ github.event.inputs.force_update }}" == "true" ]; then
            echo "- 🔧 Force update enabled" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -n "${{ github.event.inputs.specific_exam }}" ]; then
            echo "- 📋 Target: Only ServiceNow exam ${{ github.event.inputs.specific_exam }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 📚 Target: All ServiceNow exams from manifest" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f "update_log.json" ]; then
            echo "**Results:**" >> $GITHUB_STEP_SUMMARY
            python3 -c 'import json; data=json.load(open("update_log.json")); print("- Total exams processed:", data.get("total_exams", 0)); print("- Successful updates:", data.get("successful_updates", 0)); print("- Failed updates:", data.get("failed_updates", 0)); print("- Total questions:", data.get("total_questions", 0)); print("- Questions updated:", data["updated_questions"]) if data.get("updated_questions", 0) > 0 else None; print("- Force rescan:", data["force_rescan"]) if data.get("force_rescan") else None; print("- Force update:", data["force_update"]) if data.get("force_update") else None' >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "- Error reading update log" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Update log not found" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ steps.verify-changed-files.outputs.changed }}" == "true" ]; then
            echo "- ✅ Data updated and committed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- 📋 No changes to commit" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Optimization Features:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 Manifest-based targeting (ServiceNow exams from manifest)" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Single pass collection (1x vs 20x page visits)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Smart change detection for existing questions" >> $GITHUB_STEP_SUMMARY
          echo "- 📈 3-tier answer extraction (official votes → vote count → suggested answers)" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Respectful rate limiting (2-4s delays, 15s between exams)" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 85% fewer server requests, 75% faster completion" >> $GITHUB_STEP_SUMMARY
