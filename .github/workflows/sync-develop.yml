name: Sync Develop Branch

on:
  # Trigger after changelog update workflow completes
  workflow_run:
    workflows: ["Update Changelog Dates", "Release Changelog Management"]
    types:
      - completed
    branches: [main]

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_sync:
        description: "Force sync even if no changes detected"
        required: false
        type: boolean
        default: false

jobs:
  sync-develop:
    # Only run if the previous workflow completed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Setup branches
        run: |
          # Ensure we have both branches
          git fetch origin main:main || git checkout main
          git fetch origin develop:develop || git checkout -b develop origin/develop

      - name: Check if sync is needed
        id: check-sync
        run: |
          # Switch to develop branch
          git checkout develop
          
          # Check if develop is behind main
          git fetch origin main
          BEHIND_COUNT=$(git rev-list --count develop..origin/main)
          AHEAD_COUNT=$(git rev-list --count origin/main..develop)
          
          echo "Develop is $BEHIND_COUNT commits behind main"
          echo "Develop is $AHEAD_COUNT commits ahead of main"
          
          if [ "$BEHIND_COUNT" -gt 0 ] || [ "${{ github.event.inputs.force_sync }}" = "true" ]; then
            echo "sync_needed=true" >> $GITHUB_OUTPUT
            echo "behind_count=$BEHIND_COUNT" >> $GITHUB_OUTPUT
            echo "ahead_count=$AHEAD_COUNT" >> $GITHUB_OUTPUT
          else
            echo "sync_needed=false" >> $GITHUB_OUTPUT
            echo "Develop branch is already up to date with main"
          fi

      - name: Sync develop with main
        if: steps.check-sync.outputs.sync_needed == 'true'
        run: |
          # Switch to develop and merge main
          git checkout develop
          
          # Check if there are any conflicts by doing a merge --no-commit first
          if git merge origin/main --no-commit --no-ff; then
            # No conflicts, proceed with the merge
            git commit -m "chore: sync develop with main after changelog update

            - Merged latest changes from main branch
            - Updated changelog dates and release information
            - Automated by GitHub Actions after successful PR merge
            
            Behind main by: ${{ steps.check-sync.outputs.behind_count }} commits
            Ahead of main by: ${{ steps.check-sync.outputs.ahead_count }} commits"
            
            echo "Merge completed successfully"
          else
            # Conflicts detected, abort and report
            git merge --abort
            echo "❌ Merge conflicts detected between develop and main"
            echo "Manual intervention required to resolve conflicts"
            exit 1
          fi

      - name: Push updated develop branch
        if: steps.check-sync.outputs.sync_needed == 'true'
        run: |
          git push origin develop
          echo "✅ Successfully pushed updated develop branch"

      - name: Create success summary
        if: steps.check-sync.outputs.sync_needed == 'true'
        run: |
          echo "## 🔄 Develop Branch Synchronized" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Successfully synchronized \`develop\` branch with \`main\` after changelog updates." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Sync Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits merged**: ${{ steps.check-sync.outputs.behind_count }} from main" >> $GITHUB_STEP_SUMMARY
          echo "- **Develop ahead by**: ${{ steps.check-sync.outputs.ahead_count }} commits" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event.workflow_run.name || 'Manual dispatch' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The \`develop\` branch is now up to date with all changelog updates and ready for future development! 🚀" >> $GITHUB_STEP_SUMMARY

      - name: Create no-sync summary
        if: steps.check-sync.outputs.sync_needed == 'false'
        run: |
          echo "## ✅ No Sync Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The \`develop\` branch is already up to date with \`main\`." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No synchronization was needed at this time." >> $GITHUB_STEP_SUMMARY

  # Handle workflow failures
  handle-failure:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: Report failure
        run: |
          echo "## ❌ Sync Skipped" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The develop branch sync was skipped because the previous workflow failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Previous workflow**: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the previous workflow logs and fix any issues before attempting to sync." >> $GITHUB_STEP_SUMMARY